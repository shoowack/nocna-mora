// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String?
  expires_at               BigInt?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  images        Image[]      @relation("UserImages")
  memes         Meme[]       @relation("UserMemes")
  videos        Video[]      @relation("UserVideos")
  actors        Actor[]      @relation("UserActors")
  categories    Category[]   @relation("UserCategories")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Image {
  id         String   @id @default(cuid())
  url        String
  title      String?
  uploadedBy User     @relation("UserImages", fields: [userId], references: [id])
  userId     String
  memes      Meme[]   @relation("ImageMemes")
  createdAt  DateTime @default(now())
  actors     Actor[]  @relation("ActorImages")

  @@map("images")
}

model Actor {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  nickname  String?
  bio       String?
  gender    String?
  age       Int?
  slug      String   @unique

  createdAt   DateTime @default(now())
  userId      String
  createdBy   User     @relation("UserActors", fields: [userId], references: [id])

  videos    Video[]  @relation("ActorVideos")
  images    Image[]  @relation("ActorImages")

  @@map("actors")
}

enum VideoProvider {
  YOUTUBE
  VIMEO
  DAILYMOTION
}

model Video {
  id          String     @id @default(cuid())
  title       String
  videoId     String     @unique
  provider    VideoProvider

  duration    Int
  airedDate   DateTime?

  createdAt   DateTime   @default(now())
  createdBy   User       @relation("UserVideos", fields: [userId], references: [id])
  userId      String

  actors      Actor[]    @relation("ActorVideos")
  categories  Category[] @relation("VideoCategories")

  @@map("videos")
}

model Meme {
  id          String   @id @default(cuid())
  url         String
  topText     String
  bottomText  String

  createdAt   DateTime @default(now())
  createdBy   User     @relation("UserMemes", fields: [userId], references: [id])
  userId      String

  sourceImage Image    @relation("ImageMemes", fields: [imageId], references: [id])
  imageId     String

  @@map("memes")
}

model Category {
  id        String   @id @default(cuid())
  title      String   @unique
  slug      String   @unique
  videos    Video[]  @relation("VideoCategories")

  createdAt DateTime @default(now())
  createdBy User     @relation("UserCategories", fields: [userId], references: [id])
  userId    String
  updatedAt DateTime @updatedAt

  @@map("categories")
}
